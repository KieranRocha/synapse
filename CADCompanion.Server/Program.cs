// CADCompanion.Server/Program.cs - TODOS OS SERVI√áOS REGISTRADOS
using CADCompanion.Server.Data;
using CADCompanion.Server.Services;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// ‚úÖ CONFIGURA√á√ÉO DO BANCO DE DADOS
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

// ‚úÖ REGISTRAR MEMORYCACHE - NECESS√ÅRIO PARA DASHBOARDSERVICE
builder.Services.AddMemoryCache();

// ‚úÖ REGISTRO DE TODOS OS SERVI√áOS - NA ORDEM CORRETA
// Servi√ßos base primeiro
builder.Services.AddScoped<BomVersioningService>(); // ‚úÖ FALTAVA ESTE!

// Servi√ßos principais
builder.Services.AddScoped<IProjectService, ProjectService>();
builder.Services.AddScoped<IMachineService, MachineService>();

// Servi√ßos que dependem de outros
builder.Services.AddScoped<IDashboardService, DashboardService>(); // Precisa de BomVersioningService

// Outros servi√ßos (se existirem)
builder.Services.AddScoped<ISystemHealthService, SystemHealthService>(); // Descomente se existir

// ‚úÖ CONFIGURA√á√ÉO DE CONTROLLERS
builder.Services.AddControllers();

// ‚úÖ CONFIGURA√á√ÉO DE CORS PARA DESENVOLVIMENTO
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowFrontend", policy =>
    {
        policy.WithOrigins(
                "http://localhost:3000",  // React dev server
                "http://localhost:5173",  // Vite dev server  
                "http://localhost:8080"   // Electron (se usar)
            )
            .AllowAnyMethod()
            .AllowAnyHeader()
            .AllowCredentials();
    });
});

// ‚úÖ CONFIGURA√á√ÉO DE LOGGING
builder.Services.AddLogging(logging =>
{
    logging.AddConsole();
    logging.AddDebug();
});

// ‚úÖ SWAGGER PARA DOCUMENTA√á√ÉO DA API
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// ‚úÖ CONFIGURA√á√ÉO DO PIPELINE DE REQUEST
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseExceptionHandler("/Error");
    app.UseHsts();
}

// ‚úÖ MIDDLEWARES - ORDEM CR√çTICA!
app.UseHttpsRedirection();
app.UseCors("AllowFrontend"); // ‚úÖ ANTES do UseRouting!
app.UseRouting();
app.UseAuthorization();

// ‚úÖ MAPPING DE CONTROLLERS
app.MapControllers();

// ‚úÖ ENDPOINT DE HEALTH CHECK
app.MapGet("/health", () => "OK");

// ‚úÖ EXECUTAR MIGRATIONS AUTOMATICAMENTE (DESENVOLVIMENTO)
using (var scope = app.Services.CreateScope())
{
    var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    try
    {
        context.Database.Migrate();
        Console.WriteLine("‚úÖ Database migrated successfully");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå Error migrating database: {ex.Message}");
        // N√£o falhar a aplica√ß√£o por causa de migration
    }
}

Console.WriteLine("üöÄ CADCompanion Server started");
Console.WriteLine($"üåê Environment: {app.Environment.EnvironmentName}");
Console.WriteLine($"üì± API Base URL: http://localhost:5047");
Console.WriteLine($"üìö Swagger UI: http://localhost:5047/swagger");

app.Run();