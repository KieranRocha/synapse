// CADCompanion.Server/Services/BomVersioningService.cs - COM DIAGN√ìSTICO MELHORADO
using CADCompanion.Server.Data;
using CADCompanion.Server.Models;
using CADCompanion.Shared.Contracts;
using Microsoft.EntityFrameworkCore;

namespace CADCompanion.Server.Services;

public class BomVersioningService
{
    private readonly AppDbContext _context;
    private readonly ILogger<BomVersioningService> _logger;

    public BomVersioningService(AppDbContext context, ILogger<BomVersioningService> logger)
    {
        _context = context;
        _logger = logger;
    }

    public async Task<BomVersion> CreateNewVersionAsync(BomSubmissionDto dto)
    {
        _logger.LogInformation("üîÑ Processando nova vers√£o para {FilePath}", dto.AssemblyFilePath);

        try
        {
            // ‚úÖ TESTE DE CONEX√ÉO: Verifica se o banco est√° acess√≠vel
            _logger.LogInformation("üîó Testando conex√£o com banco de dados...");
            var canConnect = await _context.Database.CanConnectAsync();
            if (!canConnect)
            {
                _logger.LogError("‚ùå N√£o √© poss√≠vel conectar ao banco de dados");
                throw new InvalidOperationException("Conex√£o com banco de dados falhou");
            }
            _logger.LogInformation("‚úÖ Conex√£o com banco OK");

            // ‚úÖ BUSCA √öLTIMA VERS√ÉO: Com logging detalhado
            _logger.LogInformation("üîç Buscando √∫ltima vers√£o para arquivo: {FilePath}", dto.AssemblyFilePath);

            var lastVersionNumber = await _context.BomVersions
                .Where(v => v.AssemblyFilePath == dto.AssemblyFilePath)
                .OrderByDescending(v => v.VersionNumber)
                .Select(v => v.VersionNumber)
                .FirstOrDefaultAsync();

            var newVersionNumber = lastVersionNumber + 1;
            _logger.LogInformation("üìä √öltima vers√£o encontrada: {LastVersion}, Nova vers√£o ser√°: {NewVersion}",
                lastVersionNumber, newVersionNumber);

            // ‚úÖ VALIDA√á√ÉO DOS ITENS: Verifica se todos os itens est√£o v√°lidos
            _logger.LogInformation("üîç Validando {ItemCount} itens da BOM...", dto.Items.Count);
            for (int i = 0; i < dto.Items.Count; i++)
            {
                var item = dto.Items[i];
                if (string.IsNullOrEmpty(item.PartNumber))
                {
                    _logger.LogWarning("‚ö†Ô∏è Item {Index} tem PartNumber vazio", i);
                }
            }

            // ‚úÖ CRIA√á√ÉO DA ENTIDADE: Com valores padr√£o seguros
            _logger.LogInformation("üèóÔ∏è Criando nova entidade BomVersion...");

            var newVersion = new BomVersion
            {
                ProjectId = dto.ProjectId ?? "UNKNOWN",
                MachineId = dto.MachineId ?? Environment.MachineName,
                AssemblyFilePath = dto.AssemblyFilePath,
                ExtractedBy = dto.ExtractedBy,
                ExtractedAt = dto.ExtractedAt.ToUniversalTime(), // ‚úÖ CORRIGE TIMEZONE
                VersionNumber = newVersionNumber,
                Items = dto.Items ?? new List<BomItemDto>()
            };

            _logger.LogInformation("üìù Entidade criada - Projeto: {Project}, M√°quina: {Machine}, Vers√£o: {Version}",
                newVersion.ProjectId, newVersion.MachineId, newVersion.VersionNumber);

            // ‚úÖ SALVAMENTO: Com logging de cada step
            _logger.LogInformation("üíæ Adicionando entidade ao contexto...");
            _context.BomVersions.Add(newVersion);

            _logger.LogInformation("üíæ Salvando no banco de dados...");
            var savedRows = await _context.SaveChangesAsync();

            _logger.LogInformation("‚úÖ Salvamento conclu√≠do - {SavedRows} linhas afetadas, ID gerado: {Id}",
                savedRows, newVersion.Id);

            _logger.LogInformation("üéâ Sucesso! Vers√£o {VersionNum} salva para {FilePath}",
                newVersion.VersionNumber, newVersion.AssemblyFilePath);

            return newVersion;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå ERRO no BomVersioningService.CreateNewVersionAsync");
            _logger.LogError("‚ùå Tipo da exce√ß√£o: {ExceptionType}", ex.GetType().Name);
            _logger.LogError("‚ùå Mensagem: {Message}", ex.Message);

            if (ex.InnerException != null)
            {
                _logger.LogError("‚ùå Inner Exception: {InnerType} - {InnerMessage}",
                    ex.InnerException.GetType().Name, ex.InnerException.Message);
            }

            throw; // Re-throw para que o controller possa tratar
        }
    }
}