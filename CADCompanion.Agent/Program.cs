// Program.cs - VERS√ÉO COMPLETA COM NOTIFICA√á√ïES WINDOWS
using CADCompanion.Agent.Configuration;
using CADCompanion.Agent.Services;
using CADCompanion.Agent; // Para InventorBomExtractor
using Serilog;

IHost host = Host.CreateDefaultBuilder(args)
    .UseWindowsService(options =>
    {
        options.ServiceName = "CAD Companion Agent";
    })
    .UseSerilog((context, loggerConfig) =>
    {
        loggerConfig
            .MinimumLevel.Information()
            .MinimumLevel.Override("Microsoft", Serilog.Events.LogEventLevel.Warning)
            .Enrich.FromLogContext()
            .WriteTo.Console()
            .WriteTo.File("logs/companion-.log",
                rollingInterval: RollingInterval.Day,
                retainedFileCountLimit: 30);
    })
    .ConfigureServices((hostContext, services) =>
    {
        // ‚úÖ CONFIGURA√á√ÉO
        services.Configure<CompanionConfiguration>(hostContext.Configuration.GetSection("CompanionConfiguration"));

        // ‚úÖ HTTPCLIENT PARA API
        services.AddHttpClient<IApiCommunicationService, ApiCommunicationService>(client =>
        {
            var serverUrl = hostContext.Configuration["ServerBaseUrl"];
            if (string.IsNullOrEmpty(serverUrl))
            {
                // URL padr√£o se n√£o estiver configurada
                serverUrl = "http://localhost:5001";
                Console.WriteLine($"‚ö†Ô∏è ServerBaseUrl n√£o configurada, usando padr√£o: {serverUrl}");
            }
            client.BaseAddress = new Uri(serverUrl);
            client.Timeout = TimeSpan.FromSeconds(30);
        });

        // ‚úÖ SERVI√áOS PRINCIPAIS - ORDEM IMPORTANTE!

        // 1. Servi√ßo de Notifica√ß√µes Windows (NOVO!)
        services.AddSingleton<IWindowsNotificationService, WindowsNotificationService>();

        // 2. Registra a classe concreta 'InventorBomExtractor' como Singleton
        services.AddSingleton<InventorBomExtractor>();

        // 3. Registra a interface usando a mesma inst√¢ncia da classe concreta
        services.AddSingleton<IInventorBOMExtractor>(provider => provider.GetRequiredService<InventorBomExtractor>());

        // 4. Servi√ßos de conex√£o e eventos do Inventor
        services.AddSingleton<IInventorConnectionService, InventorConnectionService>();
        services.AddSingleton<IInventorDocumentEventService, InventorDocumentEventService>();

        // 5. Servi√ßos de processamento e sess√£o de trabalho
        services.AddSingleton<WorkSessionService>();
        services.AddSingleton<DocumentProcessingService>();

        // 6. Servi√ßo de monitoramento principal
        services.AddSingleton<IWorkDrivenMonitoringService, WorkDrivenMonitoringService>();

        // 7. Servi√ßo de comunica√ß√£o com API (ser√° injetado com notifica√ß√µes)
        // Nota: N√£o precisa registrar novamente pois j√° foi registrado com HttpClient acima

        // 8. Worker Service principal (deve ser por √∫ltimo)
        services.AddHostedService<CompanionWorkerService>();

        // ‚úÖ CONFIGURA√á√ïES ADICIONAIS
        services.AddLogging(logging =>
        {
            logging.AddConsole();
            logging.AddDebug();
            logging.SetMinimumLevel(LogLevel.Information);
        });
    })
    .Build();

// ‚úÖ LOG DE INICIALIZA√á√ÉO
var logger = host.Services.GetRequiredService<ILogger<Program>>();
logger.LogInformation("üöÄ CAD Companion Agent iniciando...");
logger.LogInformation("üîî Sistema de notifica√ß√µes Windows habilitado");

try
{
    await host.RunAsync();
}
catch (Exception ex)
{
    logger.LogCritical(ex, "‚ùå Erro cr√≠tico na inicializa√ß√£o do CAD Companion Agent");

    // Tenta mostrar notifica√ß√£o de erro cr√≠tico se poss√≠vel
    try
    {
        var notificationService = host.Services.GetService<IWindowsNotificationService>();
        if (notificationService != null)
        {
            await notificationService.ShowErrorNotificationAsync(
                "Erro Cr√≠tico",
                "CAD Companion Agent falhou ao iniciar"
            );
        }
    }
    catch
    {
        // Se falhar aqui, apenas ignora para n√£o mascarar o erro original
    }

    throw;
}
finally
{
    logger.LogInformation("üõë CAD Companion Agent finalizando...");
    Log.CloseAndFlush();
}