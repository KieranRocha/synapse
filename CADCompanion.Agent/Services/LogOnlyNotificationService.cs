// CADCompanion.Agent/Services/LogOnlyNotificationService.cs
// Servi√ßo de notifica√ß√µes para quando roda como Windows Service
using Microsoft.Extensions.Logging;

namespace CADCompanion.Agent.Services
{
    /// <summary>
    /// Implementa√ß√£o de notifica√ß√µes que apenas registra nos logs
    /// Usado quando o aplicativo roda como Windows Service
    /// </summary>
    public class LogOnlyNotificationService : IWindowsNotificationService
    {
        private readonly ILogger<LogOnlyNotificationService> _logger;

        public LogOnlyNotificationService(ILogger<LogOnlyNotificationService> logger)
        {
            _logger = logger;
            _logger.LogInformation("üîß Modo Servi√ßo: Notifica√ß√µes ser√£o registradas apenas nos logs");
        }

        public void ShowDocumentOpenedNotification(string fileName, string projectName, int machineId)
        {
            _logger.LogInformation("üìÅ [NOTIFICA√á√ÉO] Documento Aberto: {FileName} | Projeto: {ProjectName} | M√°quina ID: {MachineId}",
                fileName, projectName, machineId);
        }

        public void ShowBOMExtractionNotification(string fileName, int itemCount)
        {
            _logger.LogInformation("‚úÖ [NOTIFICA√á√ÉO] BOM Extra√≠do: {FileName} | Itens: {ItemCount}",
                fileName, itemCount);
        }

        public void ShowSimpleNotification(string title, string message)
        {
            _logger.LogInformation("‚ÑπÔ∏è [NOTIFICA√á√ÉO] {Title}: {Message}", title, message);
        }

        public void ShowWarningNotification(string title, string message)
        {
            _logger.LogWarning("‚ö†Ô∏è [NOTIFICA√á√ÉO] {Title}: {Message}", title, message);
        }

        public void ShowSuccessNotification(string title, string message)
        {
            _logger.LogInformation("‚úÖ [NOTIFICA√á√ÉO] {Title}: {Message}", title, message);
        }
    }
}